import Foundation
import React
import UIKit
import SwiftUI

@objc(NavigationModule)
class NavigationModule: NSObject {
  
  @objc
  static func requiresMainQueueSetup() -> Bool {
    return false
  }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ UINavigationController
    private func findNavigationController(in viewController: UIViewController) -> UINavigationController? {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∞–º viewController UINavigationController
      if let navController = viewController as? UINavigationController {
        return navController
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ view controllers
      for child in viewController.children {
        if let navController = findNavigationController(in: child) {
          return navController
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º presented view controller
      if let presented = viewController.presentedViewController {
        return findNavigationController(in: presented)
      }
      
      return nil
    }
  
  @objc
  func close(_ resolve: @escaping RCTPromiseResolveBlock, rejecter reject: @escaping RCTPromiseRejectBlock) {
        DispatchQueue.main.async {
            print("Close! –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫—Ä—ã—Ç–∏—è...")
            
            // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π UIViewController
            if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene {
                if let window = windowScene.windows.first {
                    if let rootViewController = window.rootViewController {
                        print("‚úÖ –ù–∞–π–¥–µ–Ω root view controller: \(type(of: rootViewController))")
                        
                        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ presented view controller (–¥–ª—è .sheet)
                        if let presentedVC = rootViewController.presentedViewController {
                            print("üéØ –ù–∞–π–¥–µ–Ω presented view controller (sheet): \(type(of: presentedVC))")
                            
                            // –ï—Å–ª–∏ —ç—Ç–æ sheet, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
                            presentedVC.dismiss(animated: true) {
                                print("‚úÖ Sheet –∑–∞–∫—Ä—ã—Ç")
                                resolve(true)
                            }
                            return
                        }
                        
                        // –ï—Å–ª–∏ –Ω–µ—Ç presented, –∏—â–µ–º UINavigationController (–¥–ª—è NavigationLink)
                        if rootViewController is UIHostingController<AnyView> || 
                           String(describing: type(of: rootViewController)).contains("UIHostingController") {
                            print("üéØ –≠—Ç–æ UIHostingController, –∏—â–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é...")
                            
                            // –ò—â–µ–º UINavigationController —Å—Ä–µ–¥–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö view controllers
                            if let navigationController = self.findNavigationController(in: rootViewController) {
                                print("‚úÖ –ù–∞–π–¥–µ–Ω UINavigationController, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥")
                                navigationController.popViewController(animated: true)
                                resolve(true)
                            } else {
                                print("‚ùå UINavigationController –Ω–µ –Ω–∞–π–¥–µ–Ω")
                                reject("ERROR", "UINavigationController –Ω–µ –Ω–∞–π–¥–µ–Ω", nil)
                            }
                        } else {
                            print("‚ùå –≠—Ç–æ –ù–ï UIHostingController")
                            reject("ERROR", "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø root view controller", nil)
                        }
                    } else {
                        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω root view controller")
                        reject("ERROR", "–ù–µ –Ω–∞–π–¥–µ–Ω root view controller", nil)
                    }
                } else {
                    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–∫–Ω–æ")
                    reject("ERROR", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–∫–Ω–æ", nil)
                }
            } else {
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ windowScene")
                reject("ERROR", "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ windowScene", nil)
            }
        }
    }
} 
